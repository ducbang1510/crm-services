# Production Database - Use Render's PostgreSQL (free) instead of MySQL
spring.datasource.url=${DATABASE_URL}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

# JPA for PostgreSQL
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# MongoDB - Comment out for now (free MongoDB is harder to find)
# For testing, consider using a free MongoDB Atlas cluster separately
# spring.data.mongodb.uri=${MONGODB_URI}

# Server Configuration
server.port=${PORT:8080}

# File upload
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# Disable Flyway for initial deployment (or fix migrations for PostgreSQL)
# spring.flyway.enabled=false

# OAuth2 - Update for production URL
spring.security.oauth2.authorization-server.issuer=${SERVER_URL:https://crm-services-api.onrender.com}
spring.security.oauth2.authorization-server.swagger-redirect-uri=https://crm-services-api.onrender.com/swagger-ui/oauth2-redirect.html
spring.security.oauth2.authorization-server.redirect-uri=${UI_URL:http://localhost:4200}

# CORS for production
# token-time-to-live in minutes
spring.security.oauth2.authorization-server.token.authorization-code-time-to-live=10
spring.security.oauth2.authorization-server.token.access-token-time-to-live=60
spring.security.oauth2.authorization-server.token.refresh-token-time-to-live=10080
authentication.cors.allowed.urls=${ALLOWED_ORIGINS:http://localhost:4200}

# Socket.IO - adjust for production
socketio.port=9092
socketio.ping.interval=60000
socketio.ping.timeout=120000
socketio.ui.host=http://localhost:4200

# Management endpoints
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when_authorized

# Application config
spring.application.name=CRM-SERVICE
spring.application.version=1.0.0